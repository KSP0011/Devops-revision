# üöÄ DOCKER COMPLETE DEVOPS NOTES (Theory + Commands + Comparisons + Interview Questions)

====================================================================
1Ô∏è‚É£ DOCKER BASICS
====================================================================
üìå Docker is a **containerization platform** that packages an application + dependencies into a container. Containers share the host OS kernel, making them lightweight and faster than VMs.

üîπ Why Docker over VMs?
| Feature        | VM                  | Docker Container         |
|----------------|--------------------|--------------------------|
| OS per app     | Yes (full OS)       | No (shares host kernel)  |
| Startup time   | Minutes             | Seconds                  |
| Size           | GBs                 | MBs                      |
| Performance    | Heavy overhead      | Lightweight              |

üîπ Core Components:
- Docker Client ‚Üí CLI/GUI to interact with Docker.
- Docker Daemon ‚Üí Runs in background, manages containers.
- Docker Images ‚Üí Read-only templates for containers.
- Docker Containers ‚Üí Running instances of images.
- Docker Registry ‚Üí Stores images (e.g., Docker Hub).

üîπ Basic Commands:
docker --version
docker info
docker help

üí¨ Interview Questions:
1. Difference between VM & Container?
2. Why is Docker lightweight?
3. Components of Docker architecture?

====================================================================
2Ô∏è‚É£ INSTALLATION & SERVICE
====================================================================
- Install Docker CE via apt/yum.
- Check service:
systemctl status docker
systemctl start docker

üí¨ Interview Questions:
1. How to check if Docker daemon is running?
2. Where are Docker images stored on Linux?

====================================================================
3Ô∏è‚É£ DOCKER IMAGES
====================================================================
- Pull image:
docker pull nginx:1.25
- List images:
docker images
- Remove image:
docker rmi <image_id>
- Inspect image:
docker inspect <image_name>

üí¨ Interview Questions:
1. Difference between image and container?
2. How does Docker layer caching work?

====================================================================
4Ô∏è‚É£ DOCKER CONTAINERS
====================================================================
- Run container:
docker run -it --name mycontainer ubuntu /bin/bash
docker run -d -p 8080:80 nginx
- List:
docker ps      # running only
docker ps -a   # all
- Start/Stop:
docker start <container>
docker stop <container>
- Exec into container:
docker exec -it <container> bash

üí¨ Interview Questions:
1. Difference between docker exec and docker attach?
2. How to run container in background?

====================================================================
5Ô∏è‚É£ DOCKER VOLUMES
====================================================================
- Types: Named, Anonymous, Bind Mounts.
- Create:
docker volume create myvol
- Use:
docker run -v myvol:/data nginx
- List:
docker volume ls

üí¨ Interview Questions:
1. Difference between bind mount and volume?
2. How to persist container data?

====================================================================
6Ô∏è‚É£ DOCKER NETWORKING
====================================================================
- Types:
  bridge ‚Üí Default, isolated.
  host ‚Üí Shares host network.
  none ‚Üí No networking.
  overlay ‚Üí Multi-host (Swarm/K8s).
- Commands:
docker network ls
docker network inspect bridge
docker network create --driver bridge mynet
docker network connect mynet mycontainer

üí¨ Interview Questions:
1. Difference between bridge and host network?
2. How do containers communicate in same network?

====================================================================
7Ô∏è‚É£ DOCKERFILE & BUILDING
====================================================================
Example Dockerfile:
FROM ubuntu:20.04
RUN apt-get update && apt-get install -y curl
COPY app.sh /app.sh
CMD ["bash", "/app.sh"]

- Build:
docker build -t myimage:v1 .

üí¨ Interview Questions:
1. Common Dockerfile instructions?
2. How to reduce image size?

====================================================================
8Ô∏è‚É£ MULTI-STAGE BUILDS
====================================================================
- Reduce final image size.
Example:
FROM golang:1.20 AS builder
WORKDIR /app
COPY . .
RUN go build -o myapp

FROM alpine
COPY --from=builder /app/myapp /usr/local/bin/myapp
CMD ["myapp"]

üí¨ Interview Questions:
1. Why use multi-stage builds?
2. Example use case?

====================================================================
9Ô∏è‚É£ IMAGE LAYERS & CACHING
====================================================================
- Each Dockerfile instruction = one layer.
- Cache is reused if unchanged.
- View:
docker history <image>

üí¨ Interview Questions:
1. How does caching work?
2. How to optimize caching?

====================================================================
üîü TAGGING & PUSHING
====================================================================
- Tag:
docker tag localimage myuser/myimage:v1
- Login:
docker login
- Push:
docker push myuser/myimage:v1

üí¨ Interview Questions:
1. Default tag if not specified?
2. Best practices for tagging?

====================================================================
1Ô∏è‚É£1Ô∏è‚É£ DOCKER COMPOSE ‚Äì ADVANCED
====================================================================
Example docker-compose.yml:
version: "3.9"
services:
  web:
    image: nginx
    ports:
      - "8080:80"
    depends_on:
      - db
  db:
    image: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass

- Scale:
docker-compose up -d --scale web=3

üí¨ Interview Questions:
1. Difference between Dockerfile and docker-compose?
2. How to scale in Compose?

====================================================================
1Ô∏è‚É£2Ô∏è‚É£ DOCKER SWARM BASICS
====================================================================
- Init:
docker swarm init
- Join worker:
docker swarm join --token <TOKEN> <IP>:2377
- Deploy service:
docker service create --name web --replicas 3 -p 80:80 nginx
- Scale:
docker service scale web=5

üí¨ Interview Questions:
1. Swarm vs Kubernetes?
2. How to scale service?

====================================================================
1Ô∏è‚É£3Ô∏è‚É£ SECURITY BEST PRACTICES
====================================================================
- Use trusted images.
- Scan images: trivy image myimage:latest
- Use non-root user in Dockerfile:
RUN adduser --disabled-password appuser
USER appuser
- Limit resources:
docker run --memory=512m --cpus=1 myimage
- Enable Content Trust:
export DOCKER_CONTENT_TRUST=1

üí¨ Interview Questions:
1. How to prevent root in container?
2. How to scan images?

====================================================================
1Ô∏è‚É£4Ô∏è‚É£ DOCKER vs KUBERNETES
====================================================================
| Feature | Docker | Kubernetes |
|---------|--------|------------|
| Purpose | Build/run containers | Orchestrate containers |
| Scope | Single host | Multi-host clusters |
| Scaling | Manual/Swarm | Auto-scaling |
| Self-Healing | Limited | Full self-healing |

üí¨ Interview Questions:
1. Can Kubernetes run without Docker?
2. Difference between Swarm & Kubernetes?

====================================================================
‚úÖ DEVOPS TIPS
====================================================================
- Use .dockerignore to avoid copying unnecessary files.
- Combine RUN commands to reduce layers.
- Pin base image versions.
- Tag with versions (avoid :latest in prod).
- Keep images minimal.

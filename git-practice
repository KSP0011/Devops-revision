🧾 GIT CHEAT SHEET (DevOps Focus)

🔧 Setup (one-time per system)
git config --global user.name "Your Name"
git config --global user.email "you@example.com"

📁 Repo Management
git init                          # Create a new Git repo
git clone <repo-url>             # Clone existing repo
git remote add origin <url>      # Link local repo to remote
git remote -v                    # Show remote URLs

💾 Staging and Committing
git status                       # View changed files
git add <file>                   # Stage a file
git add .                        # Stage all changes
git commit -m "message"          # Commit staged changes

📜 Branching & Merging
git branch                       # List branches
git branch <name>                # Create new branch
git checkout <name>              # Switch branch
git checkout -b <name>           # Create + switch
git merge <branch>               # Merge into current branch

🔁 Merge Conflict Handling
# Conflict markers in file:
<<<<<<< HEAD
Your current branch content
=======
Incoming branch content
>>>>>>> feature-branch
# Resolve manually, then:
git add <file>
git commit -m "resolve conflict"

⬆️ Pushing to GitHub
git remote set-url origin https://<username>@github.com/<username>/<repo>.git
git push -u origin <branch>      # Push current branch
# Use PAT instead of password when prompted

📥 Syncing
git fetch                        # Get remote changes (no merge)
git pull                         # Fetch + merge
git pull --rebase                # Cleaner history
git push                         # Upload local commits

🧼 Undoing
git log --oneline                # View commit history
git reset --soft HEAD~1          # Undo last commit (keep staged)
git reset --mixed HEAD~1         # Undo (keep changes)
git reset --hard HEAD~1          # Undo and discard changes

🗃️ Stashing Work
git stash                        # Save uncommitted changes
git stash pop                    # Reapply stashed changes

📌 Best Practices
- Always commit with meaningful messages
- Pull before you push
- Use branches for each feature or bugfix
- Avoid force-push unless absolutely needed
- Resolve conflicts carefully and test afterward
